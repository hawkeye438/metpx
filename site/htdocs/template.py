# Helper script to generate web pages for the site

from xml.dom import minidom
from xml.parsers.expat import ExpatError
import sys

def usage():
	print(sys.argv[0] + " <filename.html>")
	sys.exit(2)

def main():
	nav = None
	ul = None
	doc_div = None
	masthead = None
	containers = list()

	if len(sys.argv) != 2:
		usage()

	filename = sys.argv[-1]	

	# doc = minidom.parse("foo.html")
	try:
		doc = minidom.parse(filename)
	except (IOError, ExpatError), e:
		print(e)
		sys.exit(1)

	# # Find the generated title h1 and update it with an h3	
	# title = doc.getElementsByTagName("h1")[0]	
	# title_value = title.firstChild

	# title_parent = title.parentNode

	# new_title = doc.createElement("h3")
	# new_title.appendChild(title_value)
	# new_title.setAttribute("class", "title")

	# title_parent.appendChild(new_title)
	# title_parent.replaceChild(new_title,title)

	# Add bootstrap class to all <h1>
	h1_list = doc.getElementsByTagName("h1")
	for h1 in h1_list:
		h1.setAttribute("class", "page-header")

	div_list = doc.getElementsByTagName("div")
	for div in div_list:
		# Find <div class="document">, for removal
		if div.hasAttributes() and div.getAttribute("class") == "document":
			doc_div = div
		# Find <div class="col-md-2" so we can add TOC nav to it
		if div.hasAttributes() and div.getAttribute("class") == "col-md-3":
			nav = div
		# Find TOC nav generated by rst2html
		if div.hasAttribute("id") and div.getAttribute("id") == "contents":
			contents_div = div
			for node in div.childNodes:				
				if node.nodeType != node.TEXT_NODE: 
					if node.tagName == "ul":
						ul = node
		# Remove id from divs added by rst2html
		if div.hasAttribute("class") and div.getAttribute("class") == "section":
			if div.hasAttribute("id"):
				div.removeAttribute("id")

	# Insert TOC as a sidebar nav
	if ul is not None and nav is not None:
		ul.setAttribute("class", "nav affix hidden-xs hidden-sm")
		nav.appendChild(ul)
		contents_div.parentNode.removeChild(contents_div)

	for node in doc_div.childNodes:
		if node.nodeType not in (node.TEXT_NODE, node.COMMENT_NODE) and node.tagName == "div":
			if node.hasAttributes and node.getAttribute("class") == "container":	
				containers.append(node.cloneNode(deep=True))

	# Remove up all section header <a> tags
	a_tags = doc.getElementsByTagName("a")
	for a in a_tags:
		if a.hasAttribute("class") and a.getAttribute("class") == "toc-backref":			
			text = a.firstChild
			p = a.parentNode

			# p.removeChild(a)
			# a.unlink()
			# print(a)
			p.replaceChild(text, a)			
			# p.appendChild(text)
			
	scripts = doc.getElementsByTagName("script")
				
	body = doc_div.parentNode
	# Remove extra <div class="document">
	# containers is found earlier in the code
	if containers:		
		for c in containers:
			body.appendChild(c)
		for s in scripts:
			body.appendChild(s)
		body.removeChild(doc_div)


	# Now add some footer stuff

	# Add js libraries
	# t = doc.createTextNode(" ")
	
	# anchor_js = doc.createElement("script")
	# anchor_js.setAttribute("src","./dist/js/anchor.js")
	# anchor_js.appendChild(t)

	# text_value = doc.createTextNode("anchors.add('h1');")
	# anchor_add = doc.createElement("script")
	# anchor_add.appendChild(text_value)

	# body.appendChild(anchor_js)
	# body.appendChild(anchor_add)

	# Write file to disk
	f = open(filename, "wb")
	f.write(doc.toxml().encode('UTF-8'))
	# print doc.toxml()

if __name__ == "__main__":
	main()
