# Helper script to generate web pages for the site

from xml.dom import minidom
from xml.parsers.expat import ExpatError
import sys

def usage():
	print(sys.argv[0] + " <filename.html>")
	sys.exit(2)

def main():
	nav = None
	ul = None
	doc_div = None

	if len(sys.argv) != 2:
		usage()

	filename = sys.argv[-1]	

	# doc = minidom.parse("foo.html")
	try:
		doc = minidom.parse(filename)
	except (IOError, ExpatError), e:
		print(e)
		sys.exit(1)

	# Find the generated title h1 and update it with an h3	
	title = doc.getElementsByTagName("h1")[0]	
	title_value = title.firstChild

	title_parent = title.parentNode

	new_title = doc.createElement("h3")
	new_title.appendChild(title_value)
	new_title.setAttribute("class", "title")

	title_parent.appendChild(new_title)
	title_parent.replaceChild(new_title,title)

	# Add bootstrap class to all <h1>
	h1_list = doc.getElementsByTagName("h1")
	for h1 in h1_list:
		h1.setAttribute("class", "section-header")

	div_list = doc.getElementsByTagName("div")
	for div in div_list:
		# Find <div class="document">, for removal
		if div.hasAttributes() and div.getAttribute("class") == "document":
			doc_div = div
		# Find <div class="col-md-2" so we can add TOC nav to it
		if div.hasAttributes() and div.getAttribute("class") == "col-md-2":
			nav = div
		# Find TOC nav generated by rst2html
		if div.hasAttribute("id") and div.getAttribute("id") == "contents":
				contents_div = div
				for node in div.childNodes:				
					if node.nodeType != node.TEXT_NODE: 
						if node.tagName == "ul":
							ul = node

	# Insert TOC as a sidebar nav
	if ul is not None and nav is not None:
		ul.setAttribute("class", "nav affix hidden-xs hidden-sm")
		nav.appendChild(ul)
		contents_div.parentNode.removeChild(contents_div)

	for node in doc_div.childNodes:
		if node.nodeType not in (node.TEXT_NODE, node.COMMENT_NODE) and node.tagName == "div":
			if node.hasAttributes() and node.getAttribute("class") == "masthead":
				masthead = node
			elif node.hasAttributes and node.getAttribute("class") == "container":
				container = node

	body = doc_div.parentNode
	# Remove extra <div class="document">
	if masthead and container:
		body.appendChild(masthead)
		body.appendChild(container)
		body.removeChild(doc_div)


	# Now add some footer stuff
	# TODO:
	# body.appendChild

	f = open(filename, "wb")

	f.write(doc.toxml().encode('UTF-8'))

	# print doc.toxml()

if __name__ == "__main__":
	main()
