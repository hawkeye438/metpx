"""Superclasse pour un gateway de transfert de bulletins"""
import imp

__version__ = '2.0'

class gatewayException(Exception):
        """Classe d'exception spécialisés relatives aux gateways"""
	pass

class gateway:
	"""Regroupe les traits communs d'un gateway.

	   De cette classe sera spécialisé les receivers, senders, etc.
	   Un module self.config sera accessible qui contiendra les
	   éléments de configuration du fichier de config.

	   Les méthodes abstraites lèvent une exception pour l'instant, et
	   cette classe ne devrait pas être utilisée comme telle.

	   Terminologie:

	      - D'un lecteur l'on pourra appeler une lecture de données 
	        (ex: disque, socket, etc...)
	      - D'un écrivain on pourra lui fournir des données qu'il
	        pourra "écrire" (ex: disque, socket, etc...)

	   Instanciation:

		Le gateway s'instancie avec un fichier de configuration 
	        qu'il charge et dont l'implémentation varie selon le type
	        de gateway. 

	        path		String

				- Chemin d'accès vers le fichier de config
	"""
	def __init__(self,path):
		self.config = gateway.loadConfig(path)

	def loadConfig(self,path):
		"""loadConfig(path)

		   Charge la configuration, située au path en particulier.
		   La configuration doit être syntaxiquement correcte pour
		   que python puisse l'interpréter.
		"""
        	try:
                        fic_cfg = open(pathCfg,'r')
                        config = imp.load_source('config','/dev/null',fic_cfg)
                        fic_cfg.close()

			return config
                except IOError:
                        #print "*** Erreur: Fichier de configuration inexistant, erreur fatale!" #FIXME
                        #sys.exit(-1)
			raise

	loadConfig = staticmethod(loadConfig)

	def establishConnection(self):
	"""establishConnectino()

	   Établit une connection avec le lecteur et l'écrivain (vérifie
	   que les ressources sont disponibles aussi)"""
                raise gatewayException('Méthode non implantée (méthode abstraite establishConnection)')

	def read(self):
	"""read() -> data

	   data	: Liste d'objets

	   Cette méthode retourne une liste d'objets, qui peut être
	   ingérée par l'écrivain. Elle lève une exception si
	   une erreur est détectée.
	   """
		raise gatewayException('Méthode non implantée (méthode abstraite read)')
	
	def write(self,data):
        """write(data) 

           data : Liste d'objets

	   Cette méthode prends le data lu par read, et fait le traîtement
	   approprié.
           """
                raise gatewayException('Méthode non implantée (méthode abstraite write)')

	def run(self):
		"""run()

		   Boucle infinie pour le transfert de data. Une exception
		   non contenue peut être levée si le lecteur et l'écrivain
		   ne sont pas disponibles."""
		while True:
			# Vérifier que le lecteur et l'écrivain sont disponibles
			pass

			data = self.read()

			if len(data) == 0:
			# S'il n'y a pas de nouveau data
				pass
			else:
				self.write(data)

	def checkLooping(self):
		pass

