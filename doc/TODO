

  -- move code to a new repository.
        -- remove the old bin/'s

  -- add use_pds support to options.

  -- revamp coding standard.
        -- change indents to 4, ban tabs. (reindent.py ... )
        -- move 'authorship' to start of file, alone. not every routine.
        -- scope (public vs. private) of a routine is revealed by it's name
           this information is redundant. Date per routine is redundant.
           CVS logs can give that information.


  -- put all log messages in English.

  -- AFTN support -- DL
	-- need a contingency if we move the Tandem.


  -- replace 'active' verb with just file naming?
       (ie. mv yup.conf to yup.inactive )

  -- end to end performance testing.

  -- ability to interpret SIGHUP without hanging up the socket.

  -- Move Collection stuff into new config methods.
       -- figure out where to put them... /apps/px/cx/collections
	  cx == conversions ?

  -- more options on receiver? (tune directory sleep timer or...)

  -- move status out from .conf files, into q directories.
     ie.   txq/<client>/.status -> active enabled
     or just put it inside .lock?, no want to persist across restarts.

  -- student project... directory watching technique study.
	-- opendir poll, versus, poll mtime, FAM, fcntl(D_NOTIFY, fcntl(I_NOTIFY)
	-- make a something to tickle the directory to test it.
	-- test resource usage & responsiveness of all methods.
		-- when the directory is almost always empty
		-- when the directory is getting multiple files per second.

  -- student project:
	-- add sftp support into curl.
	-- just work with the open source project and modify it.


  -- student project:
	-- see if there is bandwidth control in curl, and if not
	   see if we can add it.

	
  -- full ftp sender.   DL!
	-- record byte count on send in log.
	-- supports multiple protocols (http,https, sftp  etc...)
	-- based on curl.

  -- full file fetcher, as another prx method.
  	-- based on Daniel's work for scribe files.
	-- use also for gudfx stuff.
	-- good market for this with implementation, if
           we do it right.

  -- add destination confirmation to the process of reading header2client.conf?
     reject non-existent clients?

  -- Documentation
	-- Extract all the TIKI stuff .. dump it into docs/specs...
           sub-dir like requirements/Spec/Design.?
	-- keep it for reference.

  -- i18n 
     Logs and error messages controlled by locales, default English, 'C' locale.
 
  -- add ingester routing directive, so that one can use
     masked routing on socket connections. Currently, routing is fixed by type.
     All sockets are directly mapped, and single-file is masked PDS-style. 

  -- (only later, for PDS) add ingester conversion routines. to do the 
     *2gif, or whatever conversions, and have all versions ingested.

  -- once we get to PDS... all those unwrappers from Rejean... 

  -- performance improvement, worklists...
     drop off worklists in the q directories, rather than linking files...
     reduces overhead... ie... receiver builds a list of files to q for each
     client places the list in /apps/px/txq/q<source>_<unique>
 
     Senders then read the names in all the q files, and perform the normal
     priority sort.

     faster than linking each file under heavy load, much less file system interaction.
     test!?
