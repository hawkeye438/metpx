#! /usr/bin/env python
"""
 ############################################################################################
#
#
# @Name  : sameLanguagePotFileTranslator.py
#
# @author: Nicholas Lemay
#
# @since: 2007-11-07, last updated on March 11th 2008
#
# @license: MetPX Copyright (C) 2004-2006  Environment Canada
#           MetPX comes with ABSOLUTELY NO WARRANTY; For details type see the file 
#           named COPYING in the root of the source directory tree.
# @summary: This simple script is to be used to take a .pot file generated by pygettext 
#           and create a valid of the same language that can be transformed into 
#           a binary file using msgfmt. 
#
# Usage:   This program is to be used from command-line. 
#
#   
#
##############################################################################################  
  
""" 

import os, sys  
sys.path.insert(1, sys.path[0] + '/../../../')

from pxStats.lib.LanguageTools import LanguageTools


LOCAL_MACHINE = os.uname()[1]
CURRENT_MODULE_ABS_PATH = os.path.abspath( sys.path[0] ) + '/' + "sameLanguagePotFileTranslator.py"  


def translateFile( inputfileName, outputFileName ):
    """
        @summary : Takes the input file name and translates it into 
                   a same language translation files which is written in 
                   the output filename.
    """
    
    # Input section
    outputLines = []
    
    inputFileHandle = open(inputfileName, 'r')  
    
    lines = inputFileHandle.readlines()
    newSection = []
    
    for line in lines :
        
        if  str(line).startswith('#') == True or (newSection == [] and str(line).startswith('"') == True):
            pass   
        
        else:    

                if 'msgstr' not in line :
                    #print line
                    outputLines.append(line)                
                if "msgid" in line:#new section
                    newSection.append( line.replace("msgid"  ,"msgstr" ) )
                
                elif 'msgstr' in line:
                    outputLines.extend( newSection )
                    newSection = []             
                else:
                    if newSection !=[]:
                        newSection.append(line)
        
             
             
    inputFileHandle.close()

    #output section.
    
    outputFileHandle = open(outputFileName, 'w')
    
    for line in outputLines:
          outputFileHandle.write( line )
          
          
    outputFileHandle.close()
    
    
    
def  setGlobalLanguageParameters():
    """
        @summary : Sets up all the needed global language 
                   tranlator so that it can be used 
                   everywhere in this program.
        
        @Note    : The scope of the global _ function 
                   is restrained to this module only and
                   does not cover the entire project.
        
        @return: None
        
    """
    
    global _ 
    
    _ = LanguageTools.getTranslatorForModule( CURRENT_MODULE_ABS_PATH )    



def main():
    """
        @summary : Takes a .pot file 
        and translates it into a file of the same language 
    """
    
    setGlobalLanguageParameters()
    
    if len( sys.argv ) == 2  :
        translateFile( sys.argv[1], sys.argv[1] )    
    
    elif  len( sys.argv ) == 3 :
        translateFile( sys.argv[1], sys.argv[2] )    
    
    else:    
        print _( "Program must receive one arguments or two argument" )
        print _( "usage1  : python sameLanguagePotFileTranslator potFileName  -> New file will be written over old file." )
        print _( "usage1  : python sameLanguagePotFileTranslator inputfileName outputfileName" )
        sys.exit()    



if __name__ == '__main__':
    main()