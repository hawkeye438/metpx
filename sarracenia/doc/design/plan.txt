
Status: Draft1

Implementation plan, basically 
	-- 1 iteration per month.
	-- at least a .dpkg produced per iteration.
	-- run stuff once per iteration on windows to see it vaguely works.
	   (don't package it, just try it out.)
	   if it doesn't work on windows, note the problem, that's all.
		until we get to packaging...
	-- Design work needs to run one iteration ahead.
	   features of iteration 3 need to be firmed up in iteration 2.
	-- at the beginning of the month, the initial focus documents are agreed.
	   through the month, they evolve.
	-- at the end of the month, features corresponding to the focus documents 
	   have been implemented, and the focus documents updated to reflect them.

	-- at end of each phase, revise plan.txt

focus documents go through:
	pre-draft  -- document being create/modified, not ready for review.
	draft1 -- document ready for review.
	approved-draft1 -- document reviewed and approved.

	draft1...N
	


------------- Iteration 0 -------------------------
focus: Outline.txt, the glossy design.vsd

initial versions of all the focus documents, and plan.txt



------------- Iteration 1: block-oriented transfers and logs   -- June.

focus: deltas.txt, logmessages.txt, dd-post_sample.txt

   dd-post, dd-sara, and dd-subscribe 

   validate that AMQP over SSL works, because it will all need to be there.

   implements v01.notice, and v01.log
   maintains compatibility with v00 (so subscribe can read v00.)
   
   -- does blockwise checksums.
   -- does just enough validation to do the YMD/<source> thing.
   -- dd-post should not do validation (so easier to test psychotic settings
	like 1 byte blocks.)

   post to a switch, sara build a site, dd-subscribe pulls from it.
	             logs build                      logs pull

   -- use a single exchange (no source exchanges etc...)
   -- logs just go to log exchange.

HW: whatever is lying around.

... meanwhile in GPSC...
    someone is building ssh servers in science.gc.ca for interactive...
    some nodes for sftp & bbcp ... these will just use



------------ Iteration 2: directory watch.   -- July

   focus: cluster.txt
	- because then we need to get hw implemented next iteration.


   watch a directory, and post what is there (flat)
	- using inotify (kernel feature), or perhaps inotifywait (as a wrapper process.)
	- only needs to work for a flat directory at first.

   deferred: windows version of dd-watch (no inotify available.)
	question, if this is built as inotifywait calling dd-post (or something like that.)
	then there is an inotify-win.  just introduces a dependency... but makes it easy.


   base user-facing delivery function done.

   do speedos (see monitoring.txt)

   figure out whether we need a dd-log, or if dd-subscribe is enough.
    
   testing, testing, testing...

HW: whatever is lying around.



------------- Iteration 3:  Security/Authentication, Transition Strategy -- August.
   focus: validation.txt, accounts.txt, 

   -- now start using the exchanges correctly.

   -- LDAP realms are ready.
	design is done.
	user mirroring.

  add the source_<user> exchanges.
   log2source routing thing.

  v01.permit.
		set
		get

   move all the of amqp traffic to SSL.
   validation of same 

   create .htaccess files using sara and subscribe
	-- re-create them each day


 understand the situation with new PX, old PX, px-inter.
 need to pick a strategy that minimizes future work.
 determine how Sundew and Sarracenia work together.

 somebody add windows directory polling.

HW:  initial config... in ec.gc.ca  or science.gc.ca ?

    ddsr1.cmc.ec.gc.ca ... these could be in science.gc.ca ?
    ddsr2.cmc.ec.gc.ca ... why not?

    use existing ddi and dd.beta... eventually dd


----------- Iteration 4: Management.	-- September

focus: configuration.txt, monitoring.txt, scope.txt

add operator monitoring (read-only at first)
	-- nagios based on speedos?

add configuration settings / management.

	analysts operators can stop/start ingest,
	set things in discard.

	set bandwidth-quotas per source


implement scopes/distribution

helpdesk...
Figure out how to get users created (UVL? something else?)



----------- Iteration 5: Operations for Science.gc.ca.  -- October


	all the science ones should be AMQP/SSL.

Analyst training.

Security scanning...
	... hmm...

HW:
  add:  
    ddsr1.science.gc.ca
    ddsr2.science.gc.ca

    di1.science.gc.ca
    di2.science.gc.ca

    dd1.collab.science.gc.ca
    dd2.collab.science.gc.ca
	

    say for URP, the chain could be nurp->ddsr.ec-><push>->ddsr.science.gc.ca
		->di1.science.gc.ca, <push> dd1.science.gc.ca

    do logs make it back from science to urp ?	yes it just shovels from it's own echange
    on ddsr to it's own and it keeps going back to urp. cool.

-------------- Iteration 6: Packaging & Acquisition from outside. -- November.

So far it's all sources that are inside, and we are pushing internal or to outside.
what about accepting data from outside?

Are they just ordinary sources?

Can we make it really easy to build a ddsr node. for other people to deploy.
so it is easy for others to adopt.   Recipe for a standlone single node config.


Figure out packaging?
	
start making other packages?
	redhat/centos?
	windows?

	do we make it 'pip' compatible?
		so on windows they install python, then pip pulls in deps?

--------------

End of Phase 1.
     Success criteria:
	operating di.science.gc.ca cluster.
	operating dd.science.gc.ca cluster.
	operating ddsr.science.gc.ca cluster?

	operating ddi.edm.ec.gc.ca cluster
	operating dd*.* in ec, with 'new' model available.
	transition begun.

	fully NAGIOS's. no other monitoring needed (I hope.)

     November to March...
	clean up from phase 1.
        move transition forward.

Phase 2:  (Next FY)
     
     migration of systems.

     performance tuning/accelleration.
	see if there is some obvious 'go faster' stuff.
	   do we want to support bbcp, or is per block threading better anyways?
	   setsockopts/buffers, etc... probably a whole year there.
	   but need some deployments to see issues, and address pain points,
	   rather than guessing.

     migrate from AMQP/s to https websockets (every broker runs a gateway.)
     to eliminate firewalling issue.
	   all the AMQP functionality used in phase1 remains unchanged.
           the only change is that the client programs might use a websocket:
           to initiate their AMQP connections tunnelled through ws:
           this will remove the need to permit AMQP protocol connections,
           making firewall stuff easier.
	   if we do ws:, then it would web socket over SSL, and we no longer
	   need AMQP/S,
	   Kazaa provides this, but it's commercial... free one might not be 
           jwebsocket.org looks promising...
	   hard (ie. hardcode proxy to localhost.)

     GUI'ish enablement ?
	   TBD.



