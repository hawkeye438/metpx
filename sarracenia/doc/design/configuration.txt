
Status: Pre-Draft


------------ pxpush, built in? ---------------------------------
use amqp to push config changes around.


there are admin exchanges... no sources can post to them.
only admin users can.

dd-admin Alice stop.
	sends a v01.admin.<source>.stop  message around and admin bus.
			-- stop ingesting messages coming from <source> 
			-- likely implemented in validation code.
			-- default scope will be cluster-wide (all of ddsr)
			-- option to go multi-cluster?

           once the stop is processed on a node, emit:
		v01.log.Alice.admin.stopped ...
			-- and the source will hear about it!
			-- there will be a log message for each node on which it occurred.
	
		v01.admin.<client>.drop
			-- drop messages coming from <client> 
			  (if there is a DOS or a they have a problem.)

	  set ingest space limits.
		v01.admin.<source>.<scope>.quota.
			
		v01.admin.<source>.<scope>.quota.

	  set ingest bandwidth limits.



Alice can send a dd-admin Alice stop, and it should work.


Bob (client> can send an dd-admin Bob drop... ? ) ... not sure...

v01.admin.<source>.queue  ?
returns the number of files which have not yet been validated.... (1st line)
and the file names. (1 per line?)


v01.admin.<source>.rmafterdelivery.yes ?  -- deferred.
determines whether source file should be deleted after all scopes have reported
success in obtaining the file.

  hmm...
   something monitors the log files, and knows which files are going to which scopes.
   as the log messages return, that is noted.  when all scopes have reported receipt.
   delete local file.

   this is is complicated... maybe not. not really sure if it is useful...

   use case is large files with lots of blocks, where keeping dozens of GB in flight
   does not make sense.

------------ pxpush, built in? ---------------------------------



------------------- command line arguments and config files -----------------------------
low priority...


This is a problem to be addressed after the basic proof of concept is demonstrated.

MetPX-sundew runs as an administrator configured tool.  having configurations entirely 
in configuration files makes sense for that.  
We have positional significance (config file options apply from top down in file.)

MetPX-sarracenia, is intended to be more user facing and interactive.
User facing commands ought to have robust command line parsing.

dd-subscribe and dd-post, might be candidates for this.

How to do this is not obvious...

It would appear that optparse, want to do it elegantly.


read options from 

	$DD_ROOT (default if not present, /etc/dd/ )
	~/.dd
	.dd
	commandline

have them work together.

Don't want to change the config file format... hmm.. maybe we should...
lot's of work here.  

argparse is the current command line parsing module for python.
It's flexible and builds all the help strings (in one language)

what's wrong with argparse?
	- no ordering 
	- cannot repeat arguments

so if you want to have similar to:

	reject ^x.z
	reject ^x.w
	accept ^x

	accept ^z.
	
then you don't ...
so it looks like it is just incompatible.  maybe just have a series of keywords on the command line 
with a line separator?

dd-subscribe directives='directory /home/cc;reject ^x.z;reject ^x.w;accept ^x;accept ^z;'

have to deal with escaping the separator, then just split on ; and run 
it through the same parser?

I dunno, it looks so complicated, that maybe it just isn't worth it, and stick with
just the config file.

need to look at all the config options needed, the URL notation saves a lot.
------------------- command line arguments and config files -----------------------------


------------------- store client onfig files on switch? -----------------------------
just have enough configuration to query the switch.   amqp://user@ddsr
then most other options just stored on the switch?

clients don't have to maintain a large config file... 
That way, admins can see what product selections clients are doing.

Admins could know exactly what the config file is,... 
	- but they get that info from the logs, not much point.
	- if clients want to provide configs, email works.
	- is there a real value?

------------------- store config files -----------------------------


------------------- can ask for the node list  -----------------------------

somebody, like a dd_sender, or a dd_subscribe, connects to a central switch (dd)
and asks how many nodes there are (dd1, dd2),  fire up transfer engines for
both.  if someone adds a node, a log message alerts them to a change in list, and
they 

does this help or make sense?

------------------- can ask for the node list  -----------------------------
