.TH DD_post "7" "Sep 2015" "sara 0.0.1" "Sarracenia Suite"
.SH NAME
dd_post \- Sarracenia protocol: format of post messages.
.SH SYNOPSIS
.nf 

.B AMQP Topic: <version>.post.<src>.{<dir>.}*<filename>
.B AMQP Headers: \fI<series of key-value pairs>\fR 
.B Body: \fI<first line>\fR = 
\fI<date stamp> <srcpath> <relpath> <newline>\fR
<\fIrest of body is reserved for future use\fR>

.fi


.SH DESCRIPTION
.PP
In the Sarracenia suite, sources post the availability of files. 
Sources use \fIdd_post\fR to create these announcements, and subscribers use \fIdd_subscribe\fR 
to consume the post and download the file.  This manual page describes the format of 
the messages used to announce availability.  Files are transported as pure byte streams, no metadata beyond the file contents is transported (permission bits, extended attributes, etc...), and the permissions of files are upto the receiver to decide at the destination system.

Sarracenia messages are payloads for an Advanced Message Queuing Protocol (AMQP) message bus, 
but file data transport is separate, using more common protocols such as SFTP, HTTP, HTTPS, 
or FTP.  AMQP messages provide a 'control plane' for data transfers.  While each post message 
is essentially point to point, switches can be transitively linked together to make arbitrary 
networks.  Each posting is consumed by the next hop in the chain, and then the hop re-advertises 
the data for later ones.  The posts flow in the same direction as the data.  Log messages 
(see dd_log(7)) also flow through the control path, but in the opposite direction, allowing 
sources to know the entire disposition of their products through a network.  

Sarracenia uses AMQP topic based exchanges, and the UTF-8 character set exclusively. 

A dd_post message consists of four parts:
	AMQP TOPIC, First Line, Rest of Message, AMQP HEADERS.

.SH AMQP TOPIC

In topic based AMQP exchanges, every message has a topic header.  AMQP defines the '.' character 
as a hierarchical separator (like '\' in a windows path name, or '/' on linux) there is also a 
pair of wildcards defined by the standard:  '*' matches a single topic, '#' matches the rest of 
the topic string. To allow for changes in the message body in the future, topic trees begin with 
the version number of the protocol.  

AMQP allows server side topic filtering using wildcards.  Subscribers, can specifie topics they 
are interested in (which correspond to directories on the server), allowing them to pare down the 
number of notifications they receive.

The top of the topic tree is the version specifier: "v02".  Next comes the message type specifier.  
These two fields define the protocol that is in use for the rest of the message.
The message type for post messages is "post".  After the fixed topic prefix, 
the remaining sub-topics are the path elements of the file on the web server.  
For example, if a file is placed on http://www.example.com/a/b/c/d/foo.txt, 
then the complete topic of the message will be:  \fI"v02.post.a.b.c.d.foo.txt"\fR


.SH THE FIRST LINE 

the first line of a message contains all mandatory elements of an announcement.
There is a series of white space separated fields:

.nf

<date stamp>: date
        YYYYMMDDHHMMSS.<decimal>
	Note: The datestamp is always in UTC timezone.

<srcpath> -- the base URL used to retrieve the data.

	This should be the URL consumers will use to download the data.
        options: Complete URL:

        sftp://afsiext@cmcdataserver/data/NRPDS/outputs/NRPDS_HiRes_000.gif

        in the case where the URL does not end with a path separator ('/'),
        the src path is taken to be the complete source of the file to retrieve.

        Static URL:

        sftp://afsiext@cmcdataserver/

        If the URL ends with a path separator ('/'), then the src URL is
        considered a prefix for the variable part of the retrieval URL.


<relativepath>  the variable part of the URL
	usually appended to \fIsrcpath\fR.


<newline> signals the end of the first line of the message.
	denoted by a single line feed character.

.fi

.SH THE REST OF MESSAGE

Use of only the first line of the AMQP payload is currently defined.  
The rest of the payload body is reserved for future use.

.SH AMQP HEADERS 
In addition to the first line of the message containing all mandatory fields, optional elements are
stored in AMQP headers (key-value pairs), included in messages when appropriate:

.nf 

event=<event>

	<event> = 'IN_CLOSE_WRITE' | 'IN_DELETE'

	The type of change which has occurred to the file.
	indicating that a file has been either updated, or deleted.
        no difference is made between file creation and update.
	(see inotify(7) manual page)

flow=<flow>
   A user defined string used to group data transfers together, unused by dd-sarracenia.

parts=<method>,<bsz>,<blktot>,<brem>,bno
   A header indicating the method and parameters for partitioning applied for the file.
   Partitioning is used to send a single file as a collection of segments, rather than as
   a single entity.  Partitioning is used to accellerate transfers of large data sets by using
   multiple streams, and/or to reduce storage use for extremely large files.

   when transferring partitioned files, each partition is advertised and potentially transported
   independently across a switching network.

   <method>
	a character field indicating the method of file partition applied.
	p - file is partitioned, individual part files are created.
	i - file is partitioned, but blocks are written to a single file, rather than parts.
	1 - file is in a single part (no partitioning.)

           - file segment strategy can be overridden by client. just a suggestion.
           - analogous to rsync options: --inplace, --partial,

   <blocksize in bytes>: bsz
        the number of bytes in a block.
        checksums are calculated per block, so one post

	when using method 1, the size of the block is the size of the file.
        remaining fields only useful for partitioned files.	

   <blocks in total>: blktot
        the integer total number of blocks in the file
        FIXME: (including the last block or not?)
        if set to 1.

   <remainder>: brem
        normally 0, on the last block, remaining bytes in the file
        to transfer.

        -- if (fzb=1 and brem=0)
               then bsz=fsz in bytes in bytes.
               -- entire files replaced.
               -- this is the same as rsync's --whole-file mode.

    <block#>: bno
        0 origin, the block number covered by this posting.

rename=<relpath> 

	The relative path from the current directory in which to
        place the file.

        Two cases based on the end being a path separator or not.

        case 1: NURP/GIF/

        based on the current working directory of the downloading client,
        create a subdirectory called URP, and within that, a subdirectory
        called GIF will be created.  The file name will be taken from the
        srcpath.

        if the srcpath ends in pathsep, then the relpath here will be
        concatenated to the srcpath, forming the complete retrieval URL.

        case 2: NRP/GIF/mine.gif

        if the  srcpath ends in pathsep, then the relpath will be concatenated
        to srcpath for form the complete retrieval URL.

        if the src path does not end in pathsep, then the src URL is taken
        as complete, and the file is renamed on download according to the
        specification (in this case, mine.gif)


source=<sourceid>
	a character field indicating the source of the data injected into the network.
	should be unique within a switching network.  Usually is the same as the
	account used to authenticate to the broker.

sum=<method>,<value>
	<method> - character field indicating the checksum algorithm used.

        0 - no checksums (unconditional copy.)
        d - checksum the entire data
        n - checksum the file name
        <name> - checksum with a some other algorithm, named <name>

                <name> should be ´registered´ in the switch network.
                        registered means that all downstream subscribers
                        can obtain the algorithm to validate the checksum.
	
	<value> - The value is what was computed by applying the given method to
	the partition being transferred.
	
All other headers are reserved for future use. 


.fi





.SH EXAMPLE

.nf 

topic: v02.post.ec_cmc.NRDPS.GIF.NRDPS_HiRes_000.gif
first line: 201506011357.345 sftp://afsiext@cmcdataserver/data/NRPDS/outputs/NRDPS_HiRes_000.gif NRDPS/GIF/  
headers: parts=p,457,1,0,0 sum=d,<md5sum> flow=exp13

        v02 - version of protocol
        post - indicates the type of message

        version and type together determine format of following topics and the message body.

        ec_cmc - the account used to issue the post (unique in a network).

          -- blocksize is 457  (== file size)
          -- block count is 1
          -- remainder is 0.
          -- block number is 0.
          -- d - checksum was calculated on the body of the file.
          -- flow is an argument after the relative path.
          -- complete source URL specified (does not end in '/')
          -- relative path specified for

        pull from:
                sftp://afsiext@cmcdataserver/data/NRPDS/outputs/NRDPS_HiRes_000.gif

        complete relative download path:
                NRDPS/GIF/NRDPS_HiRes_000.gif

                -- takes file name from srcpath.
                -- may be modified by validation process.


.fi


.PP Another example.

The post resulting from the following dd_watch command, noticing creation of the file 'foor':

dd_watch -s sftp://stanley@mysftpserver.com//data/shared/products/foo -pb amqp://broker.com

Here, \fIdd_watch\fR checks if the file /data/shared/products/foo is modified.
When it happens, \fIdd_watch\fR  reads the file /data/shared/products/foo and calculates its checksum.
It then builds a post message, logs into broker.com as user 'guest' (default credentials)
and sends the post to defaults vhost '/' and exchange 'sx_guest' (default exchange)

A subscriber can download the file /data/shared/products/foo  by logging as user stanley
on mysftpserver.com using the sftp protocol to  broker.com assuming he has proper credentials.

The output of the command is as follows :

Topic: v02.post.20150813.guest.data.shared.products.foo
1st line of body: 20150813161959.854 sftp://stanley@mysftpserver.com/ /data/shared/products/foo
Headers: parts=1,256,1,0,0 sum=d,25d231ec0ae3c569ba27ab7a74dd72ce

.fi
SARRACENIA publishes each post on AMQP topic exchanges, meaning every message has a topic header.
The body consists of a time \fI20150813161959.854\fR, a size in bytes \fI256\fR,
the number of block of that size \fI1\fR, the remaining bytes \fI0\fR, the
current block \fI0\fR, a flag \fId\fR meaning the md5 checksum is
performed on the data, the checksum \fI25d231ec0ae3c569ba27ab7a74dd72ce\fR,
a tag \fIdefault\fR and finally the source url of the product in the last 2 fields.
.fi


.SH FURTHER READING

http://metpx.sf.net - home page of metpx-sarracenia

http://rabbitmq.net - home page of the AMQP broker used to develop Sarracenia.

.SH SEE ALSO

dd_get(1) - the multi-protocol download client.

dd_log(7) - the format of log messages.

dd_log2source(1) - copy log messages from the switch log bus to upstream destination.

dd_sara(1) - Subscribe and Re-advertise: A combined downstream an daisy-chain posting client.

dd_post(1) - the individual file posting client.

dd_subscribe(1) - the http-only download client.

dd_watch(1) - the directory watching daemon.

inotify(7) - used for file modification announcements on Linux.

.PP
.TP
.nf
