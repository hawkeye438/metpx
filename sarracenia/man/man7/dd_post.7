.TH DD_post "7" "Aug 2015" "sara 0.0.1" "Sarracenia Suite"
.SH NAME
dd_post \- Sarracenia format of post messages.
.SH SYNOPSIS
.B AMQP Topic: <version>.post.<src>.{<dir>.}*<filename>

.B Body: \fI<first line>\fR = 
\fI<date stamp> <blocksize in bytes> <filesize in blocks> <block#> <remainder> <flags> <md5sum> <flowid> <srcpath> <relpath> <newline>\fR

<\fIrest of body is reserved for future use\fR>


.SH DESCRIPTION
.PP
In the SARRACENIA suite, sources post the availability and readiness of files. 
Sources use \fIdd_post\fR to create these announcements, and subscribers use \fIdd_subscribe\fR 
to consume the post and download the file.  This manual page describes the format of 
the messages used to announce availability.

The messages are payloads for an AMQP message bus.  So AMQP is assumed as the underlying 
messaging mechanism, however other protocols may be considered in future, so the use of 
AMQP-specific features is as limited as reasonable.  Sarracenia uses topic based exchanges 
exclusively. 

.SH AMQP TOPIC

In topic based AMQP exchanges, every message has a topic header.  AMQP defines the '.' character 
as a hierarchical separator (like '\' in a windows path name, or '/' on linux) there is also a 
pair of wildcards defined by the standard:  '*' matches a single topic, '#' matches the rest of 
the topic string. To allow for changes in the message body in the future, topic trees begin with 
the version number of the protocol.  

AMQP allows server side topic filtering using wildcards.  subscribers, can specifie topics they 
are interested in (which correspond to directories on the server), allowing them to pare down the 
number of notifications they receive.

Bring the prefix and the filtering sub-topics together, the top of the topic tree is the version 
specifier: "v01".  Next comes the message type specifier.  The message type for post messages 
is "post".  After the fixed topic prefix, the remaining sub-topics are the path elements of the 
file on the web server.  For example, if a file is placed on http://www.example.com/a/b/c/d/foo.txt, 
then the complete topic of the message will be:  \fI"v01.post.a.b.c.d.foo.txt"\fR


.SH THE FIRST LINE 

In the body of a post message, on the first line, there is a series of white space 
separated fields encoded in the UTF-8 character set.  The fields have no fixed widths, and 
there are no optional elements.   The fields are as follows:

.nf

<date stamp>: date
        YYYYMMDDHHMMSS.<decimal>
	Note: The datestamp is always in UTC timezone.

<srcpath> -- the base URL used to retrieve the data.

	This should be the URL consumers will use to download the data.
        options: Complete URL:

        sftp://afsiext@cmcdataserver/data/NRPDS/outputs/NRPDS_HiRes_000.gif

        in the case where the URL does not end with a path separator ('/'),
        the src path is taken to be the complete source of the file to retrieve.

        Static URL:

        sftp://afsiext@cmcdataserver/

        If the URL ends with a path separator ('/'), then the src URL is
        considered a prefix for the variable part of the retrieval URL.


<relativepath>  the variable part of the URL
	usually appended to \fIsrcpath\fR.


<newline> signals the end of the first line of the message.

---------------------------

In addition to the first line of the message, there are a number of key value pairs, called headers in AMQP parlance used to store transfer metadata.  

parts=<method>,<bsz>,<blktot>,<brem>,bno
   A header indicating the method and parameters for partitioning applied for the file.
   Partitioning is used to send a single file as a collection of segments, rather than as
   a single entity.  Partitioning is used to accellerate transfers of large data sets by using
   multiple streams, and/or to reduce storage use for extremely large files.

   when transferring partitioned files, each partition is advertised and potentially transported
   independently across a switching network.

   <method>
	a character field indicating the method of file partition applied.
	p - file is partitioned.
	1 - file is in a single part (no partitioning.)

   <blocksize in bytes>: bsz
        the number of bytes in a block.
        checksums are calculated per block, so one post

	when using method 1, the size of the block is the size of the file.
        remaining fields only useful for partitioned files.	
   <blocks in total>: blktot
        the integer total number of blocks in the file
        FIXME: (including the last block or not?)
        if set to 1.

   <remainder>: brem
        normally 0, on the last block, remaining bytes in the file
        to transfer.

        -- if (fzb=1 and brem=0)
               then bsz=fsz in bytes in bytes.
               -- entire files replaced.
               -- this is the same as rsync's --whole-file mode.

    <block#>: bno
        0 origin, the block number covered by this posting.


source=<sourceid>
	a character field indicating the source of the data injected into the network.
	should be unique within a switching network.  Usually is the same as the
	account used to authenticate to the broker.

sum=<method>,<value>
	<method> - character field indicating the checksum algorithm used.

        0 - no checksums (unconditional copy.)
        d - checksum the entire data
        n - checksum the file name
        c=<script> - checksum with a script, named <script>

                <script> should be ´registered´ in the switch network.
                        registered means that all downstream subscribers
                        can obtain the script to validate the checksum.
                        there needs to be a retrieval mechanism.
	
	
	the value is what was computing by applying the given method to
	the partition being transferred.
	



<flags>: a comma-separated list of option letters, some with arguments after ´=´.

        checksum setting contained in ´flags´ field, but is not the whole
        thing.  Other letters/digits could be there to designate other things.
        ´=´ acts as a separator of flags from arguments.

        results in ´flags´ entry:


        other possible flag values:

                u - unlinked... for files that have been removed? 'r'?

	watch/stop watch is used by dd_wait, and dd_wait_daemon.

		w - watch the URL given.
		x - stop watching the URL given.


        File Segment strategy:
		n - none only full files transferred.
                i - inplace (do not create temporary files, just lseek
                        within file.)
                    may result in .ddsig file being created?
                p - part files.  use .part files,  suffix fixed.
                    do not know which will be default.

           - file segment strategy can be overridden by client. just a suggestion.
           - analogous to rsync options: --inplace, --partial,

<flowid>
        an arbitrary tag set by sources for application defined tracking. 

<relpath> -- The relative path from the current directory in which to
        place the file.

        Two cases based on the end being a path separator or not.

        case 1: NURP/GIF/

        based on the current working directory of the downloading client,
        create a subdirectory called URP, and within that, a subdirectory
        called GIF will be created.  The file name will be taken from the
        srcpath.

        if the srcpath ends in pathsep, then the relpath here will be
        concatenated to the srcpath, forming the complete retrieval URL.

        case 2: NRP/GIF/mine.gif

        if the  srcpath ends in pathsep, then the relpath will be concatenated
        to srcpath for form the complete retrieval URL.

        if the src path does not end in pathsep, then the src URL is taken
        as complete, and the file is renamed on download according to the
        specification (in this case, mine.gif)

.fi





.SH EXAMPLE

.nf 

v01.post.ec_cmc.NRDPS.GIF.NRDPS_HiRes_000.gif
201506011357.345 457 1 0 0 d <md5sum> exp13 sftp://afsiext@cmcdataserver/data/NRPDS/outputs/NRDPS_HiRes_000.gif NRDPS/GIF/

        v01 - version of protocol
        post - indicates the type of message

        version and type together determine format of following topics and the message body.

        ec_cmc - the account used to issue the post (unique in a network).

          -- blocksize is 457  (== file size)
          -- block count is 1
          -- remainder is 0.
          -- block number is 0.
          -- d - checksum was calculated on the body.
          -- flow is an argument after the relative path.
          -- complete source URL specified (does not end in '/')
          -- relative path specified for

        pull from:
                sftp://afsiext@cmcdataserver/data/NRPDS/outputs/NRDPS_HiRes_000.gif

        complete relative download path:
                NRDPS/GIF/NRDPS_HiRes_000.gif

                -- takes file name from srcpath.
                -- may be modified by validation process.


.fi


.PP Another example.

The post resulting from the following dd_watch command, noticing creation of the file 'foor':

dd_watch -s sftp://stanley@mysftpserver.com//data/shared/products/foo -pb amqp://broker.com

Here, \fIdd_watch\fR checks if the file /data/shared/products/foo is modified.
When it happens, \fIdd_watch\fR  reads the file /data/shared/products/foo and calculates its checksum.
It then builds a post message, logs into broker.com as user 'guest' (default credentials)
and sends the post to defaults vhost '/' and exchange 'sx_guest' (default exchange)

A subscriber can download the file /data/shared/products/foo  by logging as user stanley
on mysftpserver.com using the sftp protocol to  broker.com assuming he has proper credentials.

The output of the command is as follows :

AMQP Topic: v01.post.20150813.guest.data.shared.products.foo
1st line of body: 20150813161959.854 256 1 0 0 d 25d231ec0ae3c569ba27ab7a74dd72ce default sftp://stanley@mysftpserver.com/ /data/shared/products/foo

.fi
SARRACENIA publishes each post on AMQP topic exchanges, meaning every message has a topic header.
The body consists of a time \fI20150813161959.854\fR, a size in bytes \fI256\fR,
the number of block of that size \fI1\fR, the remaining bytes \fI0\fR, the
current block \fI0\fR, a flag \fId\fR meaning the md5 checksum is
performed on the data, the checksum \fI25d231ec0ae3c569ba27ab7a74dd72ce\fR,
a tag \fIdefault\fR and finally the source url of the product in the last 2 fields.
.fi

.SH FURTHER READING

http://metpx.sf.net - home page of metpx-sarracenia

http://rabbitmq.net - home page of the AMQP broker used to develop Sarracenia.

.SH SEE ALSO

dd_get(1) - the multi-protocol download client.

dd_log(7) - the format of log messages.

dd_log2source(1) - copy log messages from the switch log bus to upstream destination.

dd_sara(1) - Subscribe and Re-advertise: A combined downstream an daisy-chain posting client.

dd_post(1) - the individual file posting client.

dd_subscribe(1) - the http-only download client.

dd_watch(1) - the directory watching daemon.



.PP
.TP
.nf
