#! /usr/bin/env python
"""
@copyright: 

MetPX Copyright (C) 2004-2006  Environment Canada
MetPX comes with ABSOLUTELY NO WARRANTY; For details type see the file 
named COPYING in the root of the source directory tree.


#############################################################################################
#
#
# @Name  : sameLanguagePotFileTranslator.py
#
# @author: Nicholas Lemay
#
# @since: 2007-11-07
#
# @summary: This simple script is to be used to take a .pot file generated by pygettext 
#           and create a valid of the same language that can be transformed into 
#           a binary file using msgfmt. 
#
# Usage:   This program is to be used from command-line. 
#
#   
#
##############################################################################################  
  
""" 

import commands, fnmatch, os, pickle, sys  
sys.path.insert(1, sys.path[0] + '/../../../')

from optparse import OptionParser  
from fnmatch import fnmatch  
from pxStats.lib.StatsPaths import StatsPaths

LOCAL_MACHINE = os.uname()[1]


def translateFile( inputfileName, outputFileName ):
    """
        Takes the input file name and translates it into 
        a same language translation files which is written in 
        the output filename.
    """
    
    # Input section
    outputLines = []
    
    inputFileHandle = open(inputfileName, 'r')  
    
    lines = inputFileHandle.readlines()
    newSection = []
    
    for line in lines :
        
        if  str(line).startswith('#') == True or (newSection == [] and str(line).startswith('"') == True):
            pass   
        
        else:    

                if 'msgstr' not in line :
                    #print line
                    outputLines.append(line)                
                if "msgid" in line:#new section
                    newSection.append( line.replace("msgid"  ,"msgstr" ) )
                
                elif 'msgstr' in line:
                    outputLines.extend( newSection )
                    newSection = []             
                else:
                    if newSection !=[]:
                        newSection.append(line)
        


               
                
                         
         
    inputFileHandle.close()
    
    
    #output section.
    
    outputFileHandle = open(outputFileName, 'w')
    
    for line in outputLines:
          outputFileHandle.write( line )
          
          
    outputFileHandle.close()
    
   

def main():
    """
        @summary : Takes a .pot file 
        and translates it into a file of the same language 
    """
    
    if len( sys.argv ) == 2  :
        translateFile( sys.argv[1], sys.argv[1] )    
    
    elif  len( sys.argv ) == 3 :
        translateFile( sys.argv[1], sys.argv[2] )    
    
    else:    
        print "Program must receive one arguments or two argument"
        print "usage1  : python sameLanguagePotFileTranslator potFileName  -> New file will be written over old file." 
        print "usage1  : python sameLanguagePotFileTranslator inputfileName outputfileName" 
        sys.exit()    



if __name__ == '__main__':
    main()