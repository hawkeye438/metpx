#! /usr/bin/env python

"""
#############################################################################################
# Name: pxReceiver
#
# Authors: Louis-Philippe Theriault
#          Peter Silva 
#          Daniel Lemay
#
# Date: October 2004
#
# Description:
#
#############################################################################################
"""
import sys, os, pwd

sys.path.insert(1,sys.path[0] + '/../lib')
sys.path.insert(1,sys.path[0] + '/../etc')
sys.path.insert(1,sys.path[0] + '/../lib/importedLibs')

import PXPaths, log
from optparse import OptionParser
from PXManager import PXManager
from Logger import Logger
from Source import Source
from PXIgniter import PXIgniter

if __name__ == '__main__':
    # We want this program to run under pds user
    if not os.getuid() ==  pwd.getpwnam('pds')[2]:
        pdsUID = pwd.getpwnam("pds")[2]
        os.setuid(pdsUID)
    
    usage =  """%prog [source] (start|stop|restart|reload|status)\n
example 1: %prog cmc start   => will start cmc source
example 2: %prog start       => will start all sources
             """
    # Initialize PX Paths
    PXPaths.normalPaths()

    parser = OptionParser(usage)

    # We can set the logLevel to ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
    parser.add_option("-l", "--logLevel",
                      action="store", type="string", dest="logLevel", default="INFO",
                      metavar="LOGLEVEL", help="Set the logging level [default: %default]")

    options, args = parser.parse_args()

    manager = PXManager()
    manager.initPXPaths()
    manager.initNames()
    sourceNames = manager.getRxNames()
    #print sourceNames

    # The command will be applied to a particular source 
    if len(args) == 2:
        if args[1] in ['start', 'stop', 'status', 'restart', 'reload']:
            command = args[1]
        else:
            parser.error("Wrong command name")

        if args[0] in sourceNames:
            sourceName = args[0]
        else:
            parser.error("Wrong source name: %s" % args[0])

    elif len(args) == 1:
            parser.error("Source or command missing")
    elif len(args) == 0:
        parser.error("Source and command missing")
    elif len(args) > 2:
        parser.error("Too many arguments")

    logName = PXPaths.LOG + "rx_%s.log" % sourceName
    lockPath = PXPaths.RXQ + sourceName 

    # Better way to log
    logger = Logger(logName, options.logLevel, 'RX' + sourceName)
    logger = logger.getLogger()

    # Log with BAD function call, should be changed (and PXIgniter should be changed) 
    badLogger = log.log(logName, debug=100) 

    igniter = PXIgniter('receiver', sourceName, command, lockPath, logger)

    source = Source(sourceName, logger)
    igniter.setFlow(source)
    
    # Selection by protocol type
    if source.type == 'am':
        import receiverAm
        gateway = receiverAm.receiverAm('/dev/null', source, badLogger)
        igniter.setGateway(unGateway)
    elif source.type == 'wmo':
        import receiverWmo
        gateway = receiverWmo.receiverWmo('/dev/null', source, badLogger)
        igniter.setGateway(gateway)
    elif source.type == 'single-file':
        import fetFile
        igniter.setGateway('DUMMY')
        fetFile.checkSource(sourceName, 'DUMMY', badLogger, igniter)
    elif source.type == 'bulletin-file':
        import bulletinFileReceiver
        igniter.setGateway('DUMMY')
        bulletinFileReceiver.run(source, igniter, logger, badLogger)
    else:
        raise Exception('Unknown type') 

    gateway.run()
