#! /usr/bin/env python

"""
#############################################################################################
# Name: pxSender
#
# Authors: Louis-Philippe Theriault
#          Peter Silva 
#          Daniel Lemay
#
# Date: October 2004
#
# Description:
#
#############################################################################################
"""
import sys, os, pwd, time

sys.path.insert(1,sys.path[0] + '/../lib')
sys.path.insert(1,sys.path[0] + '/../etc')
sys.path.insert(1,sys.path[0] + '/../lib/importedLibs')

import PXPaths
from optparse import OptionParser
from PXManager import PXManager
from Logger import Logger
from DiskReader import DiskReader
from Client import Client
from Source import Source
from PXIgniter import PXIgniter

# Initialize PX Paths
PXPaths.normalPaths()

if __name__ == '__main__':
    # We want this program to run under pds user
    if not os.getuid() ==  pwd.getpwnam('pds')[2]:
        pdsUID = pwd.getpwnam("pds")[2]
        os.setuid(pdsUID)
    
    usage =  """%prog [client] (start|stop|restart|reload|status)\n
example 1: %prog cmc start   => will start cmc client
example 2: %prog start       => will start all clients
             """

    parser = OptionParser(usage)

    # We can set the logLevel to ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
    parser.add_option("-l", "--logLevel",
                      action="store", type="string", dest="logLevel", default="INFO",
                      metavar="LOGLEVEL", help="Set the logging level [default: %default]")

    options, args = parser.parse_args()

    manager = PXManager()
    manager.initPXPaths()
    manager.initNames()
    clientNames = manager.getTxNames()
    #print clientNames

    # The command will be applied to a particular client 
    if len(args) == 2:
        if args[1] in ['start', 'stop', 'status', 'restart', 'reload']:
            command = args[1]
        else:
            parser.error("Wrong command name")

        if args[0] in clientNames:
            clientName = args[0]
        else:
            parser.error("Wrong client name")

    elif len(args) == 1:
            parser.error("Client or command missing")
    elif len(args) == 0:
        parser.error("Client and command missing")
    elif len(args) > 2:
        parser.error("Too many arguments")

    logName = PXPaths.LOG + "tx_%s.log" % clientName
    lockPath = PXPaths.TXQ + clientName 

    logger = Logger(logName, options.logLevel, 'TX' + clientName)
    logger = logger.getLogger()

    igniter = PXIgniter('sender', clientName, command, lockPath, logger)

    client = Client(clientName, logger)
    igniter.setFlow(client)
    
    # Selection by protocol type
    if client.type == 'am':
        import senderAm
        gateway = senderAm.senderAm('/dev/null', client, logger)
        igniter.setGateway(gateway)
    elif client.type == 'wmo':
        import senderWmo
        gateway = senderWmo.senderWmo('/dev/null', client, logger)
        igniter.setGateway(gateway)
    elif client.type == 'amis':
        import senderAMIS
        gateway = senderAMIS.senderAMIS(client, logger)
        igniter.setGateway(gateway)
    elif client.type == 'single-file':
        from MultiKeysStringSorter import MultiKeysStringSorter
        import SenderFTP
        igniter.setGateway("DUMMY")
        while True:
            reader = DiskReader(PXPaths.TXQ + client.name, client.batch,
                                True, False, 0, True, logger, MultiKeysStringSorter)
            reader.sort()
            if len(reader.sortedFiles) >= 1:
                sortedFiles = reader.sortedFiles[:client.batch]
                logger.info("%d bulletins will be sent" % len(sortedFiles))
                #fetFile.sendFiles(client.name, reader.sortedFiles[:client.batch], client.chmod, client.ftp_mode, logger)
                sender = SenderFTP.SenderFTP(client, logger)
                sender.send(sortedFiles)
            else:
                time.sleep(1)

    else:
        raise Exception('Unknown type') 

    gateway.run()
