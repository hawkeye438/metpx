#! /usr/bin/env python2
# -----------------------------------------------------
# Définition globale pour le traîtement effectué par un 
# sender (file2socket).
#
# Auteur:	Louis-Philippe Thériault
# Modifications: Pierre Michaud
# Date:		Octobre 2004

import sys, signal

sys.path.append(sys.path[0] + '/../lib')
sys.path.append(sys.path[0] + '/../etc')
sys.path.append(sys.path[0] + '/../lib/importedLibs')

from optparse import OptionParser
import gateway, log

def main():
	global logger
	global unGateway

	# Message d'usage pour l' option parser
	usage =  "%prog pathConfigFile\n" \
		 "	 Un sender lit les bulletins dans un repertoire du disque et les\n"
		 "	 envoie a un destinataire via une connexion socket.  Le fichier de\n"
		 "	 configuration doit etre exempt d'erreur pour que le programme\n"
		 "	 fonctionne correctement."

	# Instanciation de l'option parser
	parser = OptionParser(usage)
	options,args = parser.parse_args()
	
	# Un seul argument doit être fourni
	if len(args) > 1:
		parser.error("trop d'arguments fournis")
	elif len(args) == 0:
		parser.error("aucun fichier de config fourni")
	
	# Chargement de la config pour savoir le type de protocole et le path du log
	config = gateway.gateway.loadConfig(args[0])

        # FIXME: Vérifier que typeProtocole est défini et le fichier de log

	# Init du log
	logger = log.log(config.log)
	logger.writeLog(logger.INFO, "Début du programme, fichier de config chargé correctement")

        logger.writeLog(logger.DEBUG,"Protocole %s sélectionné",config.typeProcotole)

	# Branchement selon le type de protocole	
	if config.typeProcotole == 'AM':

		import senderAm
		unGateway = senderAm.senderAm(args[0],logger)
	
	elif config.typeProcotole == 'WMO':
	
		import senderWmo
		unGateway = senderWmo.senderWmo(args[0],logger)

	elif config.typeProcotole == 'AMIS':

		import senderAMIS
		unGateway = senderAMIS.senderAMIS(args[0],logger)

	else:
		raise Exception('Type de protocole non reconnu')	# FIXME

	# Définition de la méthode de shutdown "propre"
	def shutdown(sig,stack):
		global unGateway
		global logger

		logger.writeLog(logger.INFO,"Fermeture du programme (signal=%d)",sig)
		
		unGateway.shutdown()
		sys.exit(-1)
	
	# Assignement des signaux avec le shutdown
	signal.signal(signal.SIGTERM,shutdown)
	signal.signal(signal.SIGINT,shutdown)

	unGateway.run()

if __name__ == '__main__':
	main()
