#! /usr/bin/env python2
############################################################
#
# Ce petit programme execute en boucle un parcours dans le
# repertoire de travail ou arrive les bulletins meteo,
# et effectue la fusion selon les specs sur wiki.
#
# Par: Louis-Philippe Theriault
#      Stagiaire, CMC
#
############################################################

import commands
import os
import sys
import time
import string

sys.path.append(sys.path[0] + '/../lib')
sys.path.append(sys.path[0] + '/../etc')
import utils
import bulletinLib
import imp

# Fonctions utiles propres a ce programme
def creerNomFichier(compteur='none'):
	"""Creation du nom du fichier. Ne rien passer en parametre
	   si l'on ne veut pas cet argument.

	   Le compteur devrait etre une string formattee avec string.zfill()
	   pour que la longueur des nom de fichiers soit uniformes"""
	nomFichier = config.nomFichierDest
	if nomFichier.find('%cptr') != -1 and compteur != 'none':
		nomFichier = nomFichier.replace('%cptr',compteur)

	nomFichier = time.strftime(nomFichier)
	
	return nomFichier	

# Lecture du fichier de configuration du programme
if len(sys.argv) == 2:
        pathCfg = sys.argv[1]

	try:
		fic_cfg = open(pathCfg,'r')
		config = imp.load_source('config','/dev/null',fic_cfg)
		fic_cfg.close()
	except IOError:
		print "*** Erreur: Fichier de configuration inexistant, erreur fatale!"
		sys.exit(-1)
else:
        print "*** Erreur: Aucun fichier de config en entree, erreur fatale !\n" + \
	      "            Le chemin du fichier doit etre le chemin complet"
        sys.exit(-1)

# Normalisation des paths
config.sourceDir = utils.normalizePath(config.sourceDir)
config.destDir = utils.normalizePath(config.destDir)

# Init du log
log = utils.initLog(config.primaryLog,config.backupLog)

# Diverses structures contenant les informations cruciales
listeNomFichiers = []	# Liste des fichiers contenus dans le repertoire de travail
mapFichiers = {}	# Map des fichiers, pointant sur leur file desc, contenu
			# et nom de fichier s'il y a lieu
unBulletin = ""		# Une bulletin avec les lignes fusionnees
compteur = 1		# Compteur pour les bulletins fusionnes

# Test des parametres
try:
	utils.testAccess([(config.destDir,os.W_OK),(config.sourceDir,os.W_OK)])
except Exception, inst:
	if inst.args[0] == 'uDef':
		print "*** Erreur: la parametre suivant \'" + inst.args[1] + "\' est non existant ou les permissions sont erronees"
		utils.writeLog(log, "*** Erreur: la parametre suivant \'" + inst.args[1] + "\' est non existant",sync = True)
	else:
		raise

while True:

	# Init des diverses variables
	listeNomFichiers = []
	mapFichiers = {}

	# Lecture des bulletins dans le repertoire d'entree
	listeNomFichiers = utils.stripFileList(os.listdir(config.sourceDir),config.sourceDir,config.maxFileLength)
	
	# S'il n'y a pas de nouveaux fichier, l'on sleep <delai> secondes
	# puis l'on recommence la boucle
	if len(listeNomFichiers) < config.nbFicMin: 
		time.sleep(config.delai)
		continue

	# Creation du nom du fichier
	nomFicDest =  creerNomFichier(string.zfill(compteur,6))

	# Init du fichier d'ecriture
	try:
		fichierCourant = os.open( config.sourceDir + nomFicDest , os.O_CREAT | os.O_WRONLY )
	except Exception, inst:
		utils.writeLog(log,'*** Erreur : Echec de la creation d\'un fichier vide\n' + str(inst),sync=True)

        # Mise a jour du compteur
        compteur = compteur + 1

        if compteur > 999999:
                compteur = 1

	utils.writeLog(log, "Creation du fichier <" + nomFicDest + ">")

	while True:
		if len(listeNomFichiers) <= 0:
			break

		if len(listeNomFichiers) > 200:
			listeTemp = listeNomFichiers[:200]
			listeNomFichiers = listeNomFichiers[200:]
		else:
			listeTemp = listeNomFichiers
			listeNomFichiers = []

	        try:
	                # Ouverture des nouveau fichiers en mode lecture/ecriture
	                mapFichiers = utils.getMapFicOuv(listeTemp,config.sourceDir,200,os.O_RDONLY)
	        except Exception, inst:
	                utils.writeLog(log,"*** Erreur: Echec lors de l'ouverture des bulletins source " + str(inst), sync=True)
	
		try:
			# Pour chaque fichier
			for nomFichier in mapFichiers.keys():
		
		                # Lecture du contenu du bulletin
		                unBulletin = os.read(mapFichiers[nomFichier]['fileDesc'],config.MAXBULL)
		
				# Si le remplacement des '\n' par des '\r\r\n'...
				if config.formattageFinDeLigne:
					if unBulletin.find('BUFR') == -1 and unBulletin.find('GRIB') == -1:
						unBulletin = unBulletin.replace('\n','\r\r\n')
					else:
						unBulletin = unBulletin.replace('\n','\r\r\n',1)
		                                unBulletin = unBulletin[:unBulletin.rfind('7777')] + unBulletin[unBulletin.rfind('7777'):].replace('\n','\r\r\n')
		
		
				# Ecriture du champ descriptif (ex: "****1234567890****\n") et du bulletin
				os.write( fichierCourant , "****" + string.zfill(len(unBulletin) , 10) + "****\n" )
				os.write( fichierCourant , unBulletin )
		
				utils.writeLog(log,"Ajout du bulletin <" + nomFichier + ">")
		
		                # Fermeture du fichier source (bulletin) et effacement
		                os.close(mapFichiers[nomFichier]['fileDesc'])
		                os.remove(config.sourceDir + nomFichier)
	
		except Exception, inst:
			utils.writeLog(log,'*** Erreur : Fusion impossible : ' + str(inst))
			utils.writeLog(log,'Bulletin :\n' + unBulletin + '\nFichier : ' + nomFichier,sync=True)
			os.close(fichierCourant)
			continue

	# Tous les bulletins disponibles ont etes traites, fermeture du fichier fusionne
	os.close(fichierCourant)
	
	try:
		os.chmod(config.sourceDir + nomFicDest, 0644)
		os.rename(config.sourceDir + nomFicDest, \
			  config.destDir + nomFicDest)
	except Exception, inst:
		utils.writeLog(log,"*** Erreur lors de la copie du fichier : " + str(inst), sync=True)
