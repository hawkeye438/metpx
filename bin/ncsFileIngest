#! /usr/bin/env python2
# -*- coding: UTF-8 -*-
"""
#############################################################################################
# Name: ncsRenamer
# Author: Daniel Lemay (99% of the code is from LPT)
# Date: December 2004
# 
# Description: Reads bulletins from disk, compose a valid name, write them to disk and
#              erase the originals. We had to do this this way if we want to use the 
#              existing API.
#############################################################################################
"""
import sys, os, signal, time
sys.path.insert(1,sys.path[0] + '/../lib')
sys.path.insert(1,sys.path[0] + '/../lib/importedLibs')

from optparse import OptionParser
import gateway, log, bulletinManager

# Message d'usage pour le option parser
usage =  "%prog pathConfigFile\n" + \
"""
You have to include a 
full path to the config file.
"""

# Instanciation du option parser
parser = OptionParser(usage)
options,args = parser.parse_args()

# Un seul argument doit être fourni
if len(args) > 1:
   parser.error("Trop d'arguments fournis")
elif len(args) == 0:
   parser.error("Aucun fichier de config fourni")

# Chargement de la config 
config = gateway.gateway.loadConfig(args[0])

# Init du log
logger = log.log(config.log)
logger.writeLog(logger.INFO, "Debut de ncsRenamer")

bullManager = bulletinManager.bulletinManager(config.pathTemp, logger, config.pathSource, config.pathDestination, config.maxCompteur,
                                              config.lineSeparator, config.extension, config.ficCircuits)

def shutdown(sig, stack):
   logger.writeLog(logger.INFO,"Reception d'un signal de shutdown (signal=%d)", sig)
   sys.exit()

# Assignement des signaux qui initient le shutdown 
signal.signal(signal.SIGTERM,shutdown)
signal.signal(signal.SIGINT,shutdown)

def reload(sig, stack):
   global config, bullManager
   config = gateway.gateway.loadConfig(args[0])
   bullManager = bulletinManager.bulletinManager(config.pathTemp, logger, config.pathSource, config.pathDestination, config.maxCompteur,
                                                 config.lineSeparator, config.extension, config.ficCircuits)
   logger.writeLog(logger.INFO,"Reception d'un signal de reload (signal=%d)", sig)

# SIGHUP pour "reloader" 
signal.signal(signal.SIGHUP,reload)


while True:
   # We put the bulletins (read from disk) in a dict (key = absolute filename)
   bulletinsBrutsDict = bullManager.readBulletinFromDisk([bullManager.pathSource])

   if len(bulletinsBrutsDict) == 0:
      time.sleep(1)
      continue

   # Write (and name correctly) the bulletins to disk, erase them after
   for key in bulletinsBrutsDict.keys():
      bullManager.writeBulletinToDisk(bulletinsBrutsDict[key], includeError=True)
      os.unlink(key) # erase the file
   
